# Практическое задание
# Решить с помощью генераторов списка.

# 1: Даны два списка фруктов. Получить список фруктов, присутствующих в обоих исходных списках.
#     Примечание: Списки фруктов создайте вручную в начале файла.
fruits_1 = ["яблоко", "апельсин", "кумкват", "груша", "инжир", "мандарин", "ананас"]
fruits_2 = ["гранат", "инжир", "айва", "ананас", "", "кумкват", "персик", "абрикос"]
result = [fruit for fruit in fruits_1 if fruit in fruits_2]
print(result)

# 2: Дан список, заполненный произвольными числами. Получить список из элементов исходного, удовлетворяющих следующим условиям:
# Элемент кратен 3,
# Элемент положительный,
# Элемент не кратен 4.
# Примечание: Список с целыми числами создайте вручную в начале файла. Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно.
numbers = [2, -5, 3, 17, 9, -12, 24, -17, -15, 36, 18, 39]
result = [number for number in numbers if number > 0 and number % 4 and not number % 3]
print(result)


# 3. Напишите функцию которая принимает на вход список.
# Функция создает из этого списка новый список из квадратных корней чисел (если число положительное)
# и самих чисел (если число отрицательное) и возвращает результат
# (желательно применить генератор и тернарный оператор при необходимости).
# В результате работы функции исходный список не должен измениться.
# Например:
# old_list = [1, -3, 4]
# result = [1, -3, 2]
# Примечание: Список с целыми числами создайте вручную в начале файла.
# Не забудьте включить туда отрицательные числа. 10-20 чисел в списке вполне достаточно.
import math

numbers = [2, -5, 3, 17, 9, -12, 24, -17, -15, 36, 18, 39]


def sqrt_positive_number(input_list):
    return [number if number < 0 else math.sqrt(number) for number in input_list]


new_numbers = sqrt_positive_number(numbers)
print("Исходный: ", numbers)
print("Результат: ", new_numbers)

# 4. Написать функцию которая принимает на вход число от 1 до 100.
# Если число равно 13, функция поднимает исключительную ситуации ValueError
# иначе возвращает введенное число, возведенное в квадрат.
# Далее написать основной код программы.
# Пользователь вводит число.
# Введенное число передаем параметром в написанную функцию и печатаем результат, который вернула функция.
# Обработать возможность возникновения исключительной ситуации, которая поднимается внутри функции.
def not_damn_dozen_squaring(number):
    if number != 13:
        return number ** 2
    raise ValueError

number = int(input('Введите число от 1 до 100: '))

try:
    number = not_damn_dozen_squaring(number)
except ValueError:
    print('НЕЛЬЗЯ чёртову дюжину!!!')
else:
    print('Квадрат: ', number)